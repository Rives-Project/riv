#!/bin/sh

handle_interrupt() {
  echo "Interrupted, exiting..."
}
trap handle_interrupt SIGINT
trap handle_interrupt SIGTERM

BWRAPBOX_FLAGS=""

# get RIV_CARTRIDGE from first argument if unset
if [ ! -n "${RIV_CARTRIDGE+set}" ]; then
  if [ $# -lt 1 ]; then
    echo "Usage: $0 <.sqfs file> [args..]"
    return 1
  fi
  RIV_CARTRIDGE="$1"
  shift 1
fi

# mount cartridge
if ! busybox mount -o ro,noatime,nosuid,nodev,exec "$RIV_CARTRIDGE" /cartridge; then
  >&2 echo "[RIV-OS] Failed to mount cartridge filesystem."
  return 1
fi

# find cartridge entry point
EXE=$(busybox find /cartridge -maxdepth 1 -type f -executable -print -quit)
if ! [[ $EXE =~ ^[-_./a-zA-Z0-9]+$ ]]; then
  >&2 echo "[RIV-OS] Invalid executable filename \"$EXE\"."
  busybox umount /cartridge
  return 1
fi
if ! [[ -x "$EXE" ]]; then
  >&2 echo "[RIV-OS] No executable file found in cartridge."
  busybox umount /cartridge
  return 1
fi

# configure yield device
if [ -n "$RIV_NO_YIELD" ]; then
  BWRAPBOX_FLAGS="$BWRAPBOX_FLAGS --setenv RIV_NO_YIELD y"
fi

# forward stop frame flags
if [ -n "$RIV_STOP_FRAME" ]; then
  BWRAPBOX_FLAGS="$BWRAPBOX_FLAGS --setenv RIV_STOP_FRAME $RIV_STOP_FRAME"
fi

# forward entropy flags
if [ -n "$RIV_ENTROPY" ]; then
  BWRAPBOX_FLAGS="$BWRAPBOX_FLAGS --setenv RIV_ENTROPY $RIV_ENTROPY"
fi

# setup screenshot fd
RIV_SCREENSHOT_FILE=$(busybox mktemp --tmpdir=/run screenshot.XXXXXXXXXXX)
BWRAPBOX_FLAGS="$BWRAPBOX_FLAGS --setenv RIV_SCREENSHOT_FD 5"

# copy incard to iocard
RIV_IOCARD_FILE=$(busybox mktemp --tmpdir=/run iocard.XXXXXXXXXXX)
if [ -n "$RIV_INCARD" ]; then
  if ! busybox cp "$RIV_INCARD" "$RIV_IOCARD_FILE"; then
    >&2 echo "[RIV-OS] Unable to copy incard to iocard."
    busybox rm -f "$RIV_IOCARD_FILE" "$RIV_SCREENSHOT_FILE"
    busybox umount /cartridge
    return 1
  fi
  BWRAPBOX_FLAGS="$BWRAPBOX_FLAGS --setenv RIV_INCARD_FD 4"
else
  if ! busybox truncate -s 0 "$RIV_IOCARD_FILE"; then
    >&2 echo "[RIV-OS] Unable to create empty iocard."
    busybox rm -f "$RIV_IOCARD_FILE" "$RIV_SCREENSHOT_FILE"
    busybox umount /cartridge
    return 1
  fi
fi
BWRAPBOX_FLAGS="$BWRAPBOX_FLAGS --setenv RIV_OUTCARD_FD 4"

# setup outhist file
RIV_OUTHIST_FILE=$(busybox mktemp --tmpdir=/run outhist.XXXXXXXXXXX)
if [ -n "$RIV_OUTHIST" ]; then
  BWRAPBOX_FLAGS="$BWRAPBOX_FLAGS --setenv RIV_OUTHIST_FD 6"
fi

# run
[ -z "$RIV_QUIET" ] && echo "[RIV-OS] Running cartridge executable:" "$EXE" "$@"
if [ ! -n "$RIV_REPLAYLOG" ]; then  # play
  riv-bwrapbox $BWRAPBOX_FLAGS -- /usr/bin/sh-exec "$EXE" "$@" \
      4<>"$RIV_IOCARD_FILE" \
      5<>"$RIV_SCREENSHOT_FILE" \
      6<>"$RIV_OUTHIST_FILE"
  STATUS=$?
else # verify replay
  RIV_REPLAYLOG_FILE=$(busybox mktemp --tmpdir=/run replaylog.XXXXXXXXXXX)
  # prepare event log
  if ! riv-tool unpacklog <"$RIV_REPLAYLOG" >"$RIV_REPLAYLOG_FILE"; then
    >&2 echo "[RIV-OS] Unable to unpack rivlog."
    busybox rm -f "$RIV_REPLAYLOG_FILE" "$RIV_IOCARD_FILE" "$RIV_OUTHIST_FILE" "$RIV_SCREENSHOT_FILE"
    busybox umount /cartridge
    return 1
  fi
  BWRAPBOX_FLAGS="$BWRAPBOX_FLAGS --setenv RIV_REPLAYLOG_FD 3"
  BWRAPBOX_VERIFY_LIMITS=y \
    riv-bwrapbox $BWRAPBOX_FLAGS -- /usr/bin/sh-exec "$EXE" "$@" \
      3<"$RIV_REPLAYLOG_FILE" \
      4<>"$RIV_IOCARD_FILE" \
      5<>"$RIV_SCREENSHOT_FILE" \
      6<>"$RIV_OUTHIST_FILE"
  STATUS=$?
  busybox rm -f "$RIV_REPLAYLOG_FILE"
fi

# copy outhash
OUTHASH=$(busybox sha256sum "$RIV_IOCARD_FILE" | busybox cut -d' ' -f1)
if [ -n "$RIV_OUTHASH" ]; then
  if ! echo -n "$OUTHASH" > "$RIV_OUTHASH"; then
    >&2 echo "[RIV-OS] Unable to write outhash."
    busybox rm -f "$RIV_IOCARD_FILE" "$RIV_OUTHIST_FILE" "$RIV_SCREENSHOT_FILE"
    busybox umount /cartridge
  fi
fi

# copy outcard
if [ -n "$RIV_OUTCARD" ]; then
  if ! busybox cp "$RIV_IOCARD_FILE" "$RIV_OUTCARD"; then
    >&2 echo "[RIV-OS] Unable to copy iocard to outcard."
    busybox rm -f "$RIV_IOCARD_FILE" "$RIV_OUTHIST_FILE" "$RIV_SCREENSHOT_FILE"
    busybox umount /cartridge
    return 1
  fi
fi
busybox rm -f "$RIV_IOCARD_FILE"

# copy outhist
if [ -n "$RIV_OUTHIST" ]; then
  if ! busybox cp "$RIV_OUTHIST_FILE" "$RIV_OUTHIST"; then
    >&2 echo "[RIV-OS] Unable to copy output history."
    busybox rm -f "$RIV_OUTHIST_FILE" "$RIV_SCREENSHOT_FILE"
    busybox umount /cartridge
    return 1
  fi
fi
busybox rm -f "$RIV_OUTHIST_FILE"

# copy screenshot
if [ -n "$RIV_SAVE_SCREENSHOT" ]; then
  busybox cp "$RIV_SCREENSHOT_FILE" "$RIV_SAVE_SCREENSHOT"
fi
busybox rm -f "$RIV_SCREENSHOT_FILE"

# finished
[ -z "$RIV_QUIET" ] && echo "[RIV-OS] Cartridge finished with status $STATUS"
busybox umount /cartridge
return $STATUS
